

What is service principle in Azure? Purpose

In Microsoft Azure, a service principal is a "security identity" that you can use to authenticate applications, 
services, and tools to access specific resources within an Azure tenant. Essentially, a service principal is an
application that you can grant permissions to, just like you would with a user account.

Service principals are typically used in scenarios where you want to enable automated processes, scripts, 
or applications to interact with Azure resources without requiring manual user intervention. They provide a 
way for non-human entities to authenticate themselves and perform tasks within the Azure environment.

Here are some key points about service principals in Azure:

	1. Authentication: A service principal is authenticated using a client ID and client secret (or certificate) 
	or managed identity. These credentials are used to obtain an access token that allows the service principal 
	to access Azure resources.

	2. Permissions: You can assign specific roles and permissions to a service principal, controlling what actions 
	it can perform on resources. This follows the principle of least privilege, ensuring that the service principal 
	only has the permissions it needs.

	3. Access Control: Service principals can be assigned roles at different scopes, such as subscription, resource group, 
	or individual resource level. This allows you to control exactly what the service principal can access.

	4. Managed Identity: In addition to using client secrets, service principals can also use managed identities, 
	which are a way to authenticate without explicit credentials. Managed identities are tightly integrated with 
	"Azure Active Directory" and simplify the management of service principal credentials.

	5. Applications and Automation: Service principals are often used by applications, scripts, and automation tools to 
	access resources programmatically. This includes scenarios like deploying resources, managing virtual machines, 
	interacting with storage accounts, and more.

	6. Security: Service principals offer better security than using personal accounts for automation. 
	They can be more easily rotated, isolated, and have their permissions tailored to specific tasks.

Creating a service principal involves registering an application in your Azure Active Directory and assigning it the necessary 
roles. You can create a service principal using Azure Portal, Azure CLI, PowerShell, or various SDKs.

Here's a simplified outline of how you might create a service principal using Azure CLI:

Register the application:

bash
Copy code
az ad app create --display-name "MyApp" --password "MyPassword" --identifier-uris "https://myapp"
Create the service principal:

bash
Copy code
az ad sp create --id <application-id>
Assign roles to the service principal:

bash
Copy code
az role assignment create --assignee <service-principal-id> --role Contributor --scope <scope>
Remember that securing your service principals and managing their permissions are critical steps to ensure the security of your Azure resources.



--------------------------------------

What is AAD?

Ans -> It is a cloud based Identity and Access Management Service.
In Azure AD Identity can be any user who has id/password, it can be any application or service which needs authentication.
It helps the monitor access of Identity and resource management. These resources can be internal as well as external.

External Resources - MMicrosoft 365, SAAS Application


What is tenant?

----------------------------------------------------------------------------------------------------


Register an App to AAD

-> Open Azure Active Directory
-> Click "App Registration" -> New Registration -> 
	Provide AppName





----------------------------------------------------------------------------------------------------

CONNECTING AZURE SQL SERVER USING MANAGED IDENTITY (VIA .NET CODE)

This is a 3 step process.

1. Changes in WebApp (AppService) And AAD

	a. To grant the USER AUTHENTICATION in the AAD Sql Server.
	
		-> Go to Azure Portal -> Search -> Azure Active Directory Admins -> Set admin by selecting the user.

		We have to make sure this particular AD has access to SQL Server.
	
		-> The IPs which will access the SQL Server must be white listed. The Devs Machine + AppService IP range.
		This can be done by searching Azure Home  -> Search -> Firewall and Virtual Network.
	
	b. Now in the AppService we need to perform additional steps. 
		Go To AppService -> From LHS list select "Identity" -> Turn On and Save.
		This is important as this will create "Managed Identity". That is a service principle will be created for 
		this AppService. This will create an "objectId".

2. Changes at Azure Sql Server

	a. Open the SQL Server. Connect as -> Server Name + Authenticaation as "Active Directory - Password" ->
	Give credential of the user who will login (Typically AD Admin).
	
	b. Now create a User (for the target DB in the Azure SQL Server) with the same name as of the AppService (for which
	we created the Managed Identity). [This step will connect the token].
	CREATE USER <APPSERVICE> FROM EXTERNAL PROVIDER
	ALTER ROLE db_datareader ADD MEMBER <APPSERVICE> (For read Access)
	ALTER ROLE db_datawriter ADD MEMBER <APPSERVICE> (For write access)

	This step will enable the AppService to access the DB without sepecifying any credentials

3. Change at Code Side (For the code which will be deployed to appService)

	a. In the .net code update the 
		connectionString = "Server = <servername>; Database = <DbName>" //Credentials not needed
	b. We will use nuget package "Azure.Identity"
	and we will use

		var clientId = <clientId of the AppService>.
		var credential = new DefaultAzureCredential(new DefaultAzureCredentialOptions{ManagedIdentityClientId = clientId});
		var token = credential.GetToken(.......); //Codes will be written
		connectionString.AccessToken = token;

		This connectionString will be used.

----------------------------------------------------------------------------------------------------








