
2. How to call a service from angular
3. How to use promise + Code.



9. Bindings in Angular
10.Code -> Parent to child vs child to Parent Communication

14.Angular Array -> Map to select specific data
15.Angular testing framework

17.ViewChild vs ViewChildren

---------------------------------------------------------------------------------------

Angular app work behind the scene -> Angular Flow / How Angular application loads in the browser / Angular bootstrapping process

By flow, we mean how the files are called and in which sequence of files the app gets executed when we are running the application. 

Files we need to understand

1. Angular.Json

It contains various properties and configurations.
Demo structure

        "options":{  
            ......
            "outputPath":"dist/hello-world",
            "index":"src/index.html",
            "main":"src/main.ts",  // THIS LINE
            ......
            ......
            "polyfills":"src/polyfills.ts",
            "tsConfig":"src/tsconfig.app.json",
            "assets":[  
               "src/favicon.ico",
               "src/assets"
             ],
            "styles":[  
               "node_modules/bootstrap/dist/css/bootstrap.min.css",
               "src/styles.css"
             ],
            "scripts":[],
            "es5BrowserSupport":true
        }

This is the first file that is referenced by angular builder to look for all the paths and configurations 
and to check the main file. The main file indicates the builder to start the application from there.

2. Main.ts - Bootstrapping starts here

The main.ts acts as the entry point to the application. Main.ts helps in creating the browser environment
for the application to run. This is done by:

import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';

After this, main.ts file call the function bootstrapModule(AppModule) which tells the builder to
bootstrap the app.

platformBrowserDynamic().bootstrapModule(AppModule)

3. App.Module.ts 

We are bootstrapping the application with AppModule. AppModule is defined in Module.ts.

This is the module, created with the @NgModule decorator, which has declaration of all the components we are creating 
within the app module so angular is aware of them. Here we also have other modules to be used in the app.

Sample :

        import { BrowserModule } from '@angular/platform-browser';
        import { NgModule } from '@angular/core';
        import { FormsModule } from '@angular/forms';
        import { AppComponent } from './app.component';
        import { TestComponent } from './test/test.component';
        @NgModule({
           declarations: [
              AppComponent,
              TestComponent
           ],
           imports: [
              BrowserModule,
              FormsModule
           ],
           providers: [],
           bootstrap: [AppComponent]
        })
        export class AppModule { }

4. App.Components.ts + App.Component.html

From App.Module.ts file the module asks to bootstrap the AppComponent.
The AppComponent is in App.Component.ts file. This is the file which interacts with the html of the webpage and serves it with data.
The component is made using @component decorator imported from '@angular/core'.

The component has selector or custom tag to call the component. The initial selector is <app-root>
It then has template or templateUrl which has html page. It also has styleUrls.

Now Angular has all the info to be rendered.

5. Index.html

In the index.html file we can the selector to load the content of the component.


Summary :

Angular.json -> Main.ts -> App.Module.ts -> App.Component -> Index.html

----------------------------------------------------------------------------------------------------

State management in Angular - Using ngRx

We do state management in Angular using ngRx. It is a framework for building reactive application in Angular.
At a high level ngRx stores a single state and uses action to express state change. 

Application State - typically, it is the data received via API calls, user inputs, presentation UI State, app preferences, etc. 
Simply put, it is the data that can differentiate two instances of the same application. 

NgRx is made of 5 components - Store, Action, Reducer, Selectors and Effects.

NgRx uses the Redux concept of unidirectional data flow where all application goes through same lifecycle.

    Redux is a pattern and library for managing and updating application state. It uses events called "actions" to ensure that the
    state can only be updated in a predictable way. 
    Redux has three core components: 
        Actions: Simple JavaScript objects that describe a state change. Actions have a "type" property that 
            specifies the type of action, and optionally a "payload" property that sends data to the Redux store.
        Store: Holds all of the app's state.
        Reducers: Run when the store dispatches an action, and update the state based on what happened.


Store - The store holds the app's state

Action - A unique event dispatched from components and services that describe how the state should be changed.
Ex - 'AddCustomer' can be an action that will change the state (i.e add a new customer).

Reducer - All the state changes happen inside the reducer; it responds to the action and, based on that action, it will create 
a new immutable state and return it to the store.

Selector - Selector is a function used for obtaining a part of the state from the store.

Effect - A mechanism that listens for dispathced actions in an observable stream, 
processes the server response, 
and returns new action either immediately or asyncronously vcto the reducer to change the state. 

----------------------------------------------------------------------------

Route Gaurds in Angular 

Route Gaurds prevents unauthorized access to a specific route.
Note - We add route gaurd service instance to NgModule or AppModule in the "providers" array.

We have 4 types of route gaurds.
1. CanActivate
2. CanActivateChild
3. CanDeactivate
4. CanLoad

1. CanActivate -> (Helps in loading a route if that has permissions) 
This interface can be implemented to guard a route and decide whether to activate the route or not.
In case multiple guards are applied on the route, if all guards return true, then the route gets activated. If it returns
false, then the current ongoing navigation is canceled.

//Here we use CanActivate Interface to implement
export class PermissionGarud implements CanActivate{
    
    constructor(){
    }

    canActivate(route:): boolean {
    
    }
}


Note - CanActivate route guard in Angular is only called once when child routes are changed.

2. CanActivateChild -> (Helps in loading a child route if that has permission)
CanActivateChild is almost similar to the CanActivate interface. Suppose you wanted to guard all 
children's routes, you can easily add the CanActivate interface in all its children's routes. 
To be honest, that doesn't sound like an elegant solution. Keeping that in mind, Angular router API provided
a CanActivateChild interface that helps to guard children's routes based on the defined condition. 
So you would have to use the CanActivate along with the CanActivateChild option on the route level.

3. CanDeactivate -> (Helps in situation where user leaves a page)
This route guard is useful in situations where the user is navigating away from the specific screen. 
For example, you can use this guard on
    1.User is leaving the edited form without saving it. We can show the "Do you want to save your changes?" 
    modal to remind users to save changes.
    2. We can also use this guard to prevent users from back-browser action in certain situations.

The CanDeactivate route guard in Angular is a bit different in implementation from the other route guards as it 
involves calling a method defined on the component class whenever the user tries to navigate away from the route.
Also, from this guard, you get early access to the next route state to see where it is navigating back to.

4. CanLoad -> (Prevents the loading of the Lazy Loaded Module)
There are various strategies to load angular modules. Lazy loading and eager loading are the two main kinds. 
Angular defaulted the strategy to eagerly loading modules. 
A lazy loading strategy helps to load modules lazily. Lazy loading cannot check whether to load modules based on permission. 
CanLoad route guard implementation can help here.

It helps to prevent loading modules conditionally. So that unnecessary piece of code is not loaded at all in the browser. 
By using this CanLoad route guard in angular, we would get performance benefits.

---------------------------------------------------------------------

Lazy Loading in Angular / Lazy loading with Routes

Consider lazy loading in angular — a design strategy that loads NgModules as needed — for big apps with many routes. 
Lazy loading helps to keep initial bundle sizes smaller, which reduces load times.

As Angular generates a SPA (Single Page Application), all of its components are loaded at the same time. This implies 
that a large number of unneeded libraries or modules may also be loaded.

Lazy loading in angular is the process of loading website components, modules, or other assets when they are needed.

S1: Create module and keep seperate routing
    ng g m lazy-loading –routing
S2: Create a component for that module. 
    ng g c lazy-demo
S3: Add a link on the html on which we will implement lazy loading
    <li class="nav-item">
       <a class="nav-link" [routerLink]="['/lazy-loading]">
          Lazy Loading
       </a>
    </li>
S4: Lazy load the component displayed on the route – /lazy-loading Make necessary changes in app-routing.module.ts. 
Here, we will load the module lazily using loadChildren.

app-routing.module.ts

        {
           path: 'lazy-'oading',
         ' loadChildren: () => import('./lazy-loading/lazy-loading.module')
           .then(m => m.LazyLoadingModule)
        },
S5: Set up the route in lazy-loading-routing.module.ts.

        const routes: Routes = [
         { path: '', component: LazyDemoComponent }
        ];
         @NgModule({
            imports: [RouterModule.forChild(routes)],
            exports: [RouterModule]
        })

Benefits of Lazy Loading
Faster initial load times: By loading only essential modules upfront, you significantly reduce the 
initial payload for the browser to download, leading to a quicker and smoother user experience.

Reduced bundle size: Lazy loading keeps your initial bundle size smaller, translating to faster page loads and less data 
consumption, especially for users on mobile networks. It has a compact backpack that can be carried around.

Improved performance: With less code loaded initially, your application has fewer resources to manage, leading to smoother
rendering and better overall performance. Imagine a race car with a streamlined design for optimal speed.

Enhanced modularity: Lazy loading encourages a modular architecture, where your code is well-organized and divided into 
clear, independent modules. This makes your application easier to maintain and develop in the long run. 
Think of it like having separate drawers for different kitchen utensils, keeping everything organized and accessible.

Summary -

-Lazy loading in angular helps alot to boost the performance of the application
-To use lazy loading, the application must be divided into several modules.
-Using a preloading strategy helps a lot since all other modules-load once the application has
been loaded once, and then additional modules are available immediately when they are needed.


-----------------------------------------------------------------------

Eager Loading vs Lazy Loading vs Pre-Loading

    Eager loading is loading modules before application starts.
    Lazy loading is loading modules on demand.
    Preloading is loading modules in background just after application starts.
    In lazy loading and preloading, modules are loaded asynchronously.

    Eager Loading: used to load core modules and feature modules that are required to start the application.
    Pre-Loading: used to load specific feature modules that are very likely to be used soon after the application started.
    Lazy Loading: all other modules could be lazily loaded on demand after the application started

------------------------------------------------------------------------

Angular Router : Children or Load Children

Angular Router Interface has following properties :
1. Path : router API breaks the URL into fragments. The path property could correspond to a combination of these fragments
2. Component: refers to the component which will be invoked for the route
3. Children: refers to the nested routes, angular would load then upfront
4. LoadChildren: also used to define nested routes but angular router will lazily load them.

------------------------------------------------------------------------------

Pipes

	Pipes in angular are used to alter the output representation of the variables/values on the template. Ex. for variable name
	NAMEVAL = “raja” can be shown in titlecase using {{ NAMEVAL | titlecase}} will show “Raja”.

	It supports chaining i.e use one Pipe after another
	
	Different types of pipes
		* Date
		* TitleCase | lowercase | uppercase
		* Currency
		* Json - Will convert object into json format.
				In Angular, you can use the built-in JsonPipe to format JavaScript objects as JSON strings for display 
				in your templates. The JsonPipe is one of Angular's built-in pipes, and it's used to convert objects to
				JSON strings, making it easier to display JSON data in your templates.

				Here's how you can use the JsonPipe in an Angular template:

					import { Component } from '@angular/core';
					import { JsonPipe } from '@angular/common';

					@Component({
					  selector: 'app-json-pipe',
					  template: `
						<h2>JSON Pipe Example</h2>
						<p>Original Object:</p>
						<pre>{{ myObject }}</pre>
						<p>JSON String:</p>
						<pre>{{ myObject | json }}</pre>
					  `,
					})
					export class JsonPipeComponent {
					  myObject = { name: 'John', age: 30 };
					}

				In the Html

					<pre>{{ myObject | json }}</pre>
				
				When you use the json pipe in the template, it automatically converts the myObject JavaScript object into a 
				formatted JSON string for display. The json pipe is especially useful for debugging and displaying JSON data 
				in a readable format.



	We can also have Custom Pipes.

--------------------------------------------------------------

Custom Pipes

	In Angular, you can create custom pipes to transform or format data in your templates. 
	Custom pipes allow you to encapsulate reusable data transformation logic in a way that promotes 
	maintainability and reusability across your application.

	Step 1 :
		
		Create a Pipe Class:

		Start by creating a class for your custom pipe. The class should be decorated with the @Pipe decorator, and it should 
		implement the PipeTransform interface, which requires you to implement the transform method. The transform method is 
		where you define the logic for your custom pipe.

			import { Pipe, PipeTransform } from '@angular/core';

			@Pipe({
			  name: 'custom'
			})
			export class CustomPipe implements PipeTransform {
			  transform(value: any, ...args: any[]): any {
				// Your transformation logic here
				return transformedValue;
			  }
			}

	Step 2 : 

		Register in the Module. By default it will be register in the module. If not we need to manually add it.

	Step 3 :

		Use:

		You can now use your custom pipe in your Angular templates. To use it, you simply pipe your data through the custom pipe
		in the template using the | symbol.

		html
		Copy code
		<p>{{ 'World' | custom:'Hello' }}</p>

------------------------------------------------------------------------

Pure vs Impure Pipes

When writing a custom pipe we need to specify whether we define a pure or an impure pipe.
Ex :
    @Pipe
    ({
        name: 'filterPipe',
        pure: false/true
    })

Pure Pipe - Whenever there is a change in Value or Parameters the pure pipe is called.
Impure Pipe - 

Pure Pipe - Pure pipes are the pipes which are executed only when a “PURE CHANGE” to the input value is detected.
Impure Pipe - Impure pipe executes everytime irrespective of source has changed or not. which leads to bad performance. 
Thats why it is not recommneded to use pipes for filtering data.

------------------------------------------------------------------------

Why use angular framework over react?

Angular is a framework maintained by Google whereas React is a library maintained by Facebook.
As angular is a framework this provide us a scope to implement several business logic at the angular code.
As react is a library so it is totally dependent on implementing complex logic in the backend only.

------------------------------------------------------------------------

Local Storage vs Session Storage vs Cache Storage

Local Storage - Capacity - 10Mb, Accessible from any window, Never auto expire.
Session Storage - Capacity - 5Mb, Accessible from same tab only, Expire on tab close.
Cache Storage - Capacity - 5KB, Accessible from any window, Expiration must be manually set.

------------------------------------------------------------------------

Subject vs Behaviour Subject

------------------------------------------------------------------------

RxJs - 
It is a reactive programming library that makes use of observables, make it easy to write asynchronous code.
Concepts -
1. Stream - A stream is sequence of data from any source.
2. Observable - An Observable is a function that can return a stream to an Observer over time.
3. Observer - An Observer is an object that receives notification from an observable. It has 3 method: next(), error(), complete()
4. Operators - They are used to manipulate and transform Observable streams.

Now connection between them 
-Observable represents a stream of data that can be subscribed to, allowing multiple data to be emitted over time.
They provide methods for subscribing the stream and handling its emission.

-Operators are functions that can transform, filter, or combine data streams produced by Observables. Operators can be chained together.

-Observers are the objects that can listen to observables.

Observer is connected to Observable using Subscription

Observable Lifecycle
Creation -> Subscription -> Execution -> Destruction

Creation of Observable + Subscribing
    
    import { Observable } from "rxjs";

    ngOnInit() : void 
    {
        var observable = Observable.create((observer: any) => 
            {
                observer.next("Hello World")
            });

        observable.subscribe(function log(message:any)
        {
            console.log(message);
        })

    }

Executing observable
    Observer typically consists of three callback functions:
	
		- next(value): Called when the Observable emits a new value.
		- error(error): Called when an error occurs in the Observable (optional).
            If an error is found in the Observable, nothing else can be delivered to the Observable.
		- complete(): Called when the Observable has completed emitting values (optional). 
            With the complete value, the Observer sends no value. 
            This usually signals that the subscriptions for that particular Observable are complete.


    Ex - 
    export class AppComponent implements OnInit {
      title = 'ngcanvas';

      ngOnInit(): void {
        var observable = Observable.create((observer:any) => {
          observer.next('I am number 1');
          observer.next('I am number 2');
          observer.error('I am number 3');
          observer.complete();
          observer.next('I am number 5');
        });

        observable.subscribe(function logMessage(message:any) {
          console.log(message);
        });
      }
    }

Destroying observable
    To destroy an Observable is to essentially remove it from the DOM by unsubscribing to it. 
    Normally for asynchronous logic, RxJS takes care of unsubscribing and, immediately after an 
    error or a complete notification, your Observable is unsubscribed.

Why observables are important
    -Emitting multiple values asynchronously is very easily handled with Observables
    -Error handlers can also easily be done inside Observables rather than a construct like Promises
    -Observables are considered lazy, so in case of no subscription there will be no emission of data values
    -Observables can be resolved multiple times as opposed to functions, or even Promises

-----------------------

Promises -

    A promise is an object that represents the eventual completion or failure of an asynchronous operation. 
    A promise can be in one of three states:

    Pending: The initial state of a promise. The promise is neither fulfilled nor rejected.
    Fulfilled: The state of a promise when the asynchronous operation is successful and the result is available.
    Rejected: The state of a promise when the asynchronous operation fails and an error is thrown.

    Promises work by providing a way to handle the result of an asynchronous operation once it is complete. 
    When a promise is created, it is in the pending state. Once the asynchronous operation is complete, 
    the promise is either fulfilled or rejected.    

Creation of Promise 
    
    var promise = new Promise((resolve, reject) => 
    {
    
    });

    Ex :
    let error = true;
    function doAsyncTask() {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          if (error) {
            reject('error'); // pass values
          } else {
            resolve('done'); // pass values
          }
        }, 1000);
      });
    }

    doAsyncTask().then(
      (val) => console.log(val),
      (err) => console.error(err)
    );

-------------------------------------------------------------------------
Observable vs Promise 

- An Observable is an object that represents a stream of data that can be subscribed to, allowing multiple 
values to be emitted over time. 
Observables provide methods for subscribing to the stream and handling its emissions. 
On the other hand, Operators are functions that can be used to transform, filter, or combine data streams produced by Observables.
Operators take an Observable as input and return a new Observable with the transformed data stream.

A Promise is a one-time operation that represents an asynchronous operation’s eventual completion or
failure and can only return a single value. 
Once a Promise is resolved or rejected, its state cannot be changed.
Promises are used in Angular for handling HTTP requests and other asynchronous operations.

- Observable also has the advantage over Promise to be cancellable. 
If the result of an HTTP request to a server or some other expensive async operation isn't needed anymore,
the Subscription of an Observable allows you to cancel the subscription, 
while a Promise will eventually call the success or failed callback even when
you don't need the notification or the result it provides anymore.

- While a Promise starts immediately, an Observable only starts if you subscribe to it. This is why Observables are called lazy.

-------------------------------------------------------------------------

Subject vs Behaviour Subject

Subject - An RxJS subject is also an special type of Observable that allows the respective 
values to be subscribed among the observers. 

Ex - 
    import { Subject } from 'rxjs';
    const mySubject = new Subject<number>(); 
    mySubject.subscribe({
      next: (v) => console.log(1)
    });

    mySubject.subscribe({
      next: (v) => console.log(2)
    });
 
    mySubject.next(1);
    mySubject.next(2);

    mySubject.subscribe({
      next: (v) => console.log(3)
    });
 
     mySubject.next(3);

Behaviour Subject - Using Behavior Subject you can get the current value on the initial value on Subscription. 
And whenever if you subscribe using the observable, it will immediately retrieves the current value.

Ex - 
    import { BehaviorSubject } from 'rxjs';
    var subject = new BehaviorSubject<number>(0);  
    // 0 is the initial value

    subject.subscribe({
      next: (v) => console.log('observerA: ' + v)  
    // output initial value, 
    then new values on `next` triggers
    });

    subject.next(1);  
    // output new value 1 for 'observer A'

    subject.next(2);  
    // output new value 2 for 'observer A', 
    current value 2 for 'Observer B' on subscription

    subject.subscribe({
      next: (v) => console.log('observerB: ' + v)  
    // output current value 2, 
    then new values on `next` triggers
    });

    subject.next(3);

Diff
1.  If you subscribe to an subject, you won’t get the current value or initial value.
    But when you subscribe to an Behavior Subject, you will be able to get the current value or the initial value.
2.  You don’t have to define a default value whenever you declare the subject.
    But you have to define a default value whenever you declare Behavior Subject based upon the data type.
3.  In Subject, each next subscribers receive only the upcoming values.
    In Behavior Subject, each next subscribers receive one previous value and upcoming values.

Respect to Observable
    Observable is a Generic, and Behavior Subject is technically a sub–type of Observable because 
    BehaviorSubject is an observable with specific qualities.
    And when it comes to Subject and Observable is that a Subject has state, it keeps a list of observers. 
    On the other hand, an observable is just a function that sets up observation.


-------------------------------------------------------------------------

Subject vs Replay Subject vs Behaviour

Subject 

    A subject is like a turbocharged observable. It can almost be thought of an event message pump in that everytime a
    value is emitted, all subscribers receive the same value. 
    The same analogy can be used when thinking about “late subscribers”. A Subject does not have a memory, 
    therefore when a subscriber joins, it only receives the messages from that point on (It doesn’t get backdated values).

    Example -

    Code

        let mySubject = new Subject<number>();

        mySubject.subscribe(x => console.log("First Subscription : " + x));

        mySubject.next(1);
        mySubject.next(2);
        mySubject.next(3);

        mySubject.subscribe(x => console.log("Second Subscription : " + x));

        mySubject.next(4);

    Output

        First Subscription : 1
        First Subscription : 2
        First Subscription : 3
        First Subscription : 4
        Second Subscription : 4

Replay Subject

    In Subject it will hold the data from when it is instantiated. But with Replay Subject it can hold all the previous data.

    Code

        let mySubject = new ReplaySubject<number>();

        mySubject.subscribe(x => console.log("First Subscription : " + x));

        mySubject.next(1);
        mySubject.next(2);
        mySubject.next(3);

        mySubject.subscribe(x => console.log("Second Subscription : " + x));

        mySubject.next(4);

    Output
        
        First Subscription : 1
        First Subscription : 2
        First Subscription : 3
        Second Subscription : 1
        Second Subscription : 2
        Second Subscription : 3
        First Subscription : 4
        Second Subscription : 4

Behaviour Subject
    
    A BehaviorSubject can sometimes be thought of a type of ReplaySubject, but with additional functionality
    (Or limitations depending on how you look at it).

    If you think of a BehaviorSubject as simply being a ReplaySubject with a buffersize of 1 (That is, they will 
    only replay the last value), then you’re half way there to understanding BehaviorSubjects. The one large caveat 
    is that BehaviourSubjects *require* an initial value to be emitted.

    Code

        let mySubject = new BehaviorSubject<number>(1);

        mySubject.subscribe(x => console.log("First Subscription : " + x));

        mySubject.next(2);
        mySubject.next(3);

        mySubject.subscribe(x => console.log("Second Subscription : " + x));

        mySubject.next(4);

    Output

        First Subscription : 1
        First Subscription : 2
        First Subscription : 3
        Second Subscription : 3
        First Subscription : 4
        Second Subscription : 4

-------------------------------------------------------------------------

Calling service from Angular application

S1 : Import HttpClient module
    import { HttpClientModule } from '@angular/common/http';

S2 : Create service
    import { Injectable } from '@angular/core';
    import { HttpClient } from '@angular/common/http';
    import { Observable } from 'rxjs';

    @Injectable({
      providedIn: 'root'
    })
    export class ApiService {

      apiUrl = 'https://jsonplaceholder.typicode.com';

      constructor(private http: HttpClient) { }

      getPosts(): Observable<any[]> {
        return this.http.get<any[]>(`${this.apiUrl}/posts`);
      }
    }

S3 : Inject the service

    ngOnInit() {
        this.apiService.getPosts().subscribe((data: any[]) => {
          this.posts = data;
        });
    }

-------------------------------------SELECT

interface user {
  username : String,
  name : String
}

let modifiedArray: Array = this.users.map(user => {
  return {
    username: item.username,
    name: item.name
  }
})

------------------------------------------ FILTER
const data = [0, 1, 3, 4, 5, 6, 7, 8, 9];

const filtered = data.filter((value) => value > 5);

console.log(filtered);

---------------------------------------------------------------------------------------------

Angular code to call three API endpoints and showing the response at one go. That is waiting till all the responses are received.

    To call three API endpoints and handle their responses together in an Angular application, you can use the forkJoin operator from RxJS. 
    This operator allows you to execute multiple HTTP requests in parallel and wait for all of them to complete before proceeding. Here’s a concise example:

    Import Modules

    import { Component, OnInit } from '@angular/core';
    import { HttpClient } from '@angular/common/http';
    import { forkJoin } from 'rxjs';

    Create Components

        @Component({
          selector: 'app-root',
          templateUrl: './app.component.html',
          styleUrls: ['./app.component.css']
        })
        export class AppComponent implements OnInit {
          constructor(private http: HttpClient) {}

          ngOnInit() {
            this.callApis();
          }

          callApis() {
            const api1 = this.http.get('https://api.example.com/endpoint1');
            const api2 = this.http.get('https://api.example.com/endpoint2');
            const api3 = this.http.get('https://api.example.com/endpoint3');

            forkJoin([api1, api2, api3]).subscribe(results => {
              const [response1, response2, response3] = results;
              console.log('API 1 Response:', response1);
              console.log('API 2 Response:', response2);
              console.log('API 3 Response:', response3);
            });
          }
        }

    In this example:

    forkJoin is used to combine the three HTTP GET requests.
    The subscribe method waits for all the requests to complete and then processes the responses together.
    This approach ensures that you handle all responses at once, making it efficient and easy to manage

--------------------------------------------------------------------------------------

Exception handling in Angular

    In Angular, you can use try, catch, and finally blocks to handle errors and ensure certain code runs regardless of 
    whether an error occurred. This is particularly useful for managing asynchronous operations and ensuring cleanup 
    tasks are performed. Here’s a basic example:

    SYNTAX:

    try {
      // Code that may throw an error
    } catch (error) {
      // Code to handle the error
      console.error('An error occurred:', error);
    } finally {
      // Code that will always run, regardless of an error
      console.log('This will always run.');
    }

    CODE: 

    import { HttpClient } from '@angular/common/http';
    import { Component, OnInit } from '@angular/core';

    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.css']
    })
    export class AppComponent implements OnInit {
      constructor(private http: HttpClient) {}

      ngOnInit() {
        this.fetchData();
      }

      async fetchData() {
        try {
          const response = await this.http.get('https://api.example.com/data').toPromise();
          console.log('Data:', response);
        } catch (error) {
          console.error('Error fetching data:', error);
        } finally {
          console.log('Fetch attempt finished.');
        }
      }
    }
   
    The "try" block contains the code that might throw an error.
    The "catch" block handles any errors that occur in the try block.
    The "finally" block contains code that will run regardless of whether an error occurred or not







