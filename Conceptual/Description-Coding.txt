Q. Example of Enum

	using System;

	enum DaysOfWeek
	{
		Sunday,
		Monday,
		Tuesday,
		Wednesday,
		Thursday,
		Friday,
		Saturday
	}

	class Program
	{
		static void Main()
		{
			DaysOfWeek today = DaysOfWeek.Monday;
			Console.WriteLine("Today is: " + today);

			// Output the numeric value of the enum
			int dayNumber = (int)today;
			Console.WriteLine("Numeric value of " + today + " is: " + dayNumber);
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to get the repeatative elements in the int array. (using hashtable)

	using System;
	using System.Collections.Generic;

	class Program
	{
		static void Main()
		{
			int[] arr = { 1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 9, 1 };
			var duplicates = FindDuplicates(arr);

			Console.WriteLine("Duplicate elements in the array:");
			foreach (var item in duplicates)
			{
				Console.WriteLine(item);
			}
		}

		static List<int> FindDuplicates(int[] arr)
		{
			var duplicates = new List<int>();
			var seen = new HashSet<int>();

			foreach (var num in arr)
			{
				if (seen.Contains(num))
				{
					duplicates.Add(num);
				}
				else
				{
					seen.Add(num);
				}
			}

			return duplicates;
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to get the repeatative elements in the int array. (Using dictionary)

	using System;
	using System.Collections.Generic;

	class Program
	{
		static void Main()
		{
			int[] arr = { 1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 9, 1 };
			var duplicates = FindDuplicates(arr);

			Console.WriteLine("Duplicate elements in the array:");
			foreach (var item in duplicates)
			{
				Console.WriteLine(item);
			}
		}

		static List<int> FindDuplicates(int[] arr)
		{
			var duplicates = new List<int>();
			var elementCount = new Dictionary<int, int>();

			foreach (var num in arr)
			{
				if (elementCount.ContainsKey(num))
				{
					elementCount[num]++;
				}
				else
				{
					elementCount[num] = 1;
				}
			}

			foreach (var kvp in elementCount)
			{
				if (kvp.Value > 1)
				{
					duplicates.Add(kvp.Key);
				}
			}

			return duplicates;
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to get the repeatative elements in the int array using dictionary and store the duplicate elements in the
int array and show the result

	using System;
	using System.Collections.Generic;

	class Program
	{
		static void Main()
		{
			int[] arr = { 1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 9, 1 };
			int[] duplicates = FindDuplicates(arr);

			Console.WriteLine("Duplicate elements in the array:");
			foreach (var item in duplicates)
			{
				Console.WriteLine(item);
			}
		}

		static int[] FindDuplicates(int[] arr)
		{
			var elementCount = new Dictionary<int, int>();
			var duplicatesList = new List<int>();

			foreach (var num in arr)
			{
				if (elementCount.ContainsKey(num))
				{
					elementCount[num]++;
				}
				else
				{
					elementCount[num] = 1;
				}
			}

			foreach (var kvp in elementCount)
			{
				if (kvp.Value > 1)
				{
					duplicatesList.Add(kvp.Key);
				}
			}

			return duplicatesList.ToArray();
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to use httpClient to call another API

	using System;
	using System.Net.Http;
	using System.Threading.Tasks;

	class Program
	{
		static async Task Main(string[] args)
		{
			using (HttpClient client = new HttpClient())
			{
				client.BaseAddress = new Uri("https://api.example.com/");
				client.DefaultRequestHeaders.Accept.Clear();
				client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

				HttpResponseMessage response = await client.GetAsync("endpoint");
				if (response.IsSuccessStatusCode)
				{
					string data = await response.Content.ReadAsStringAsync();
					Console.WriteLine(data);
				}
				else
				{
					Console.WriteLine("Error: " + response.StatusCode);
				}
			}
		}
	}

	NOTE - Breakdown of Steps -
	a. Create an HttpClient instance: This is done using the using statement to ensure it is properly disposed of after use.
	b. Set the base address: This is the base URL for the API you are calling.
	c. Set the request headers: Here, we set the Accept header to application/json to indicate that we expect JSON responses.
	d. Send a GET request: The GetAsync method sends a GET request to the specified endpoint.
	e. Handle the response: If the response is successful, we read the content as a string and print it. Otherwise, we print
	the error status code.

---------------------------------------------------------------------------------------------------

Q. Code to show all the CRUD operations for Service. Use httpClient to call another API with CRUD Operations

	Model Class -> Program.cs

		public class Product
		{
			public int Id { get; set; }
			public string Name { get; set; }
			public decimal Price { get; set; }
		}

	Service Class -> ProductService.cs

		using System;
		using System.Collections.Generic;
		using System.Net.Http;
		using System.Net.Http.Json;
		using System.Threading.Tasks;

		public class ProductService
		{
			private readonly HttpClient _httpClient;

			public ProductService(HttpClient httpClient)
			{
				_httpClient = httpClient;
			}

			public async Task<IEnumerable<Product>> GetProductsAsync()
			{
				return await _httpClient.GetFromJsonAsync<IEnumerable<Product>>("api/products");
			}

			public async Task<Product> GetProductAsync(int id)
			{
				return await _httpClient.GetFromJsonAsync<Product>($"api/products/{id}");
			}

			public async Task<Product> CreateProductAsync(Product product)
			{
				var response = await _httpClient.PostAsJsonAsync("api/products", product);
				response.EnsureSuccessStatusCode();
				return await response.Content.ReadFromJsonAsync<Product>();
			}

			public async Task UpdateProductAsync(int id, Product product)
			{
				var response = await _httpClient.PutAsJsonAsync($"api/products/{id}", product);
				response.EnsureSuccessStatusCode();
			}

			public async Task DeleteProductAsync(int id)
			{
				var response = await _httpClient.DeleteAsync($"api/products/{id}");
				response.EnsureSuccessStatusCode();
			}
		}

	Using the service class in the Application -> Program.cs

		using System;
		using System.Net.Http;
		using System.Threading.Tasks;

		class Program
		{
			static async Task Main(string[] args)
			{
				using var httpClient = new HttpClient { BaseAddress = new Uri("https://api.example.com/") };
				var productService = new ProductService(httpClient);

				// Create a new product
				var newProduct = new Product { Name = "New Product", Price = 99.99M };
				var createdProduct = await productService.CreateProductAsync(newProduct);
				Console.WriteLine($"Created Product: {createdProduct.Id}, {createdProduct.Name}, {createdProduct.Price}");

				// Get all products
				var products = await productService.GetProductsAsync();
				Console.WriteLine("Products:");
				foreach (var product in products)
				{
					Console.WriteLine($"{product.Id}, {product.Name}, {product.Price}");
				}

				// Get a single product by ID
				var singleProduct = await productService.GetProductAsync(createdProduct.Id);
				Console.WriteLine($"Single Product: {singleProduct.Id}, {singleProduct.Name}, {singleProduct.Price}");

				// Update the product
				singleProduct.Price = 79.99M;
				await productService.UpdateProductAsync(singleProduct.Id, singleProduct);
				Console.WriteLine($"Updated Product: {singleProduct.Id}, {singleProduct.Name}, {singleProduct.Price}");

				// Delete the product
				await productService.DeleteProductAsync(singleProduct.Id);
				Console.WriteLine($"Deleted Product: {singleProduct.Id}");
			}
		}

---------------------------------------------------------------------------------------------------

Q. Code to CRUD operation of an API

	using Microsoft.AspNetCore.Mvc;
	using CrudApiExample.Models;
	using System.Collections.Generic;
	using System.Linq;

	namespace CrudApiExample.Controllers
	{
		[Route("api/[controller]")]
		[ApiController]
		public class ProductController : ControllerBase
		{
			private static List<Product> products = new List<Product>
			{
				new Product { Id = 1, Name = "Product1", Price = 10.0M },
				new Product { Id = 2, Name = "Product2", Price = 20.0M }
			};

			// GET: api/product
			[HttpGet]
			public ActionResult<IEnumerable<Product>> GetProducts()
			{
				return products;
			}

			// GET: api/product/1
			[HttpGet("{id}")]
			public ActionResult<Product> GetProduct(int id)
			{
				var product = products.FirstOrDefault(p => p.Id == id);
				if (product == null)
				{
					return NotFound();
				}
				return product;
			}

			// POST: api/product
			[HttpPost]
			public ActionResult<Product> PostProduct(Product product)
			{
				product.Id = products.Max(p => p.Id) + 1;
				products.Add(product);
				return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);
			}

			// PUT: api/product/1
			[HttpPut("{id}")]
			public IActionResult PutProduct(int id, Product product)
			{
				var existingProduct = products.FirstOrDefault(p => p.Id == id);
				if (existingProduct == null)
				{
					return NotFound();
				}
				existingProduct.Name = product.Name;
				existingProduct.Price = product.Price;
				return NoContent();
			}

			// DELETE: api/product/1
			[HttpDelete("{id}")]
			public IActionResult DeleteProduct(int id)
			{
				var product = products.FirstOrDefault(p => p.Id == id);
				if (product == null)
				{
					return NotFound();
				}
				products.Remove(product);
				return NoContent();
			}
		}
	}

---------------------------------------------------------------------------------------------------
	
Q. Code to CRUD operation on List

	using System;
	using System.Collections.Generic;
	using System.Linq;

	public class ProductService
	{
		private List<Product> products = new List<Product>();

		// Create
		public void AddProduct(Product product)
		{
			product.Id = products.Count > 0 ? products.Max(p => p.Id) + 1 : 1;
			products.Add(product);
		}

		// Read
		public List<Product> GetAllProducts()
		{
			return products;
		}

		public Product GetProductById(int id)
		{
			return products.FirstOrDefault(p => p.Id == id);
		}

		// Update
		public bool UpdateProduct(int id, Product updatedProduct)
		{
			var product = products.FirstOrDefault(p => p.Id == id);
			if (product == null)
			{
				return false;
			}
			product.Name = updatedProduct.Name;
			product.Price = updatedProduct.Price;
			return true;
		}

		// Delete
		public bool DeleteProduct(int id)
		{
			var product = products.FirstOrDefault(p => p.Id == id);
			if (product == null)
			{
				return false;
			}
			products.Remove(product);
			return true;
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to CRUD on dictionary

	Model Class -> Product.cs

		public class Product
		{
			public int Id { get; set; }
			public string Name { get; set; }
			public decimal Price { get; set; }
		}

	Class for CRUD operations -> ProductService.cs

		using System;
		using System.Collections.Generic;

		public class ProductService
		{
			private Dictionary<int, Product> products = new Dictionary<int, Product>();

			// Create
			public void AddProduct(Product product)
			{
				if (!products.ContainsKey(product.Id))
				{
					products[product.Id] = product;
				}
				else
				{
					throw new ArgumentException("Product with the same ID already exists.");
				}
			}

			// Read
			public List<Product> GetAllProducts()
			{
				return new List<Product>(products.Values);
			}

			public Product GetProductById(int id)
			{
				if (products.TryGetValue(id, out var product))
				{
					return product;
				}
				else
				{
					throw new KeyNotFoundException("Product not found.");
				}
			}

			// Update
			public void UpdateProduct(int id, Product updatedProduct)
			{
				if (products.ContainsKey(id))
				{
					products[id] = updatedProduct;
				}
				else
				{
					throw new KeyNotFoundException("Product not found.");
				}
			}

			// Delete
			public void DeleteProduct(int id)
			{
				if (!products.Remove(id))
				{
					throw new KeyNotFoundException("Product not found.");
				}
			}
		}

---------------------------------------------------------------------------------------------------

Q. Code to convert String to char array

	using System;

	class Program
	{
		static void Main()
		{
			string str = "Hello, World!";
			char[] charArray = str.ToCharArray();

			Console.WriteLine("Character array:");
			foreach (char c in charArray)
			{
				Console.WriteLine(c);
			}
		}
	}

---------------------------------------------------------------------------------------------------

Q. Write an algorithm to determine if a number n is happy number
	Input: n = 19
	Output: True
	19 is Happy Number,
	1^2 + 9^2 = 82
	8^2 + 2^2 = 68
	6^2 + 8^2 = 100
	1^2 + 0^2 + 0^2 = 1
	As we reached to 1, 19 is a Happy Number.

	Input: n = 20
	Output: False

		using System;
		using System.Collections.Generic;

		public class HappyNumber
		{
			public static bool IsHappy(int n)
			{
				HashSet<int> seenNumbers = new HashSet<int>();

				while (n != 1 && !seenNumbers.Contains(n))
				{
					seenNumbers.Add(n);
					n = GetNextNumber(n);
				}

				return n == 1;
			}

			private static int GetNextNumber(int n)
			{
				int sum = 0;
				while (n > 0)
				{
					int digit = n % 10;
					sum += digit * digit;
					n /= 10;
				}
				return sum;
			}

			public static void Main()
			{
				int[] testCases = { 19, 20 };

				foreach (var n in testCases)
				{
					Console.WriteLine($"{n} is a Happy Number: {IsHappy(n)}");
				}
			}
		}

---------------------------------------------------------------------------------------------------

Q. Code for bubble sort

	using System;

	public class BubbleSort
	{
		public static void Sort(int[] array)
		{
			int n = array.Length;
			for (int i = 0; i < n - 1; i++)
			{
				for (int j = 0; j < n - i - 1; j++)
				{
					if (array[j] > array[j + 1])
					{
						// Swap array[j] and array[j + 1]
						int temp = array[j];
						array[j] = array[j + 1];
						array[j + 1] = temp;
					}
				}
			}
		}

		public static void Main()
		{
			int[] array = { 64, 34, 25, 12, 22, 11, 90 };
			Console.WriteLine("Unsorted array:");
			Console.WriteLine(string.Join(", ", array));

			Sort(array);

			Console.WriteLine("Sorted array:");
			Console.WriteLine(string.Join(", ", array));
		}
	}

---------------------------------------------------------------------------------------------------

Q. Write program to return max 3 distinct numbers from given array of numbers. 

	using System;
	using System.Collections.Generic;
	using System.Linq;

	public class MaxThreeDistinctNumbers
	{
		public static List<int> GetMaxThreeDistinctNumbers(int[] numbers)
		{
			// Use a HashSet to store distinct numbers
			HashSet<int> distinctNumbers = new HashSet<int>(numbers);

			// Convert the HashSet to a List and sort it in descending order
			List<int> sortedNumbers = distinctNumbers.OrderByDescending(num => num).ToList();

			// Return the top 3 numbers if there are at least 3 distinct numbers
			return sortedNumbers.Take(3).ToList();
		}

		public static void Main()
		{
			int[] numbers = { 10, 4, 3, 50, 23, 90, 90, 50, 23, 10 };
			List<int> result = GetMaxThreeDistinctNumbers(numbers);

			Console.WriteLine("The top 3 distinct numbers are: " + string.Join(", ", result));
		}
	}

---------------------------------------------------------------------------------------------------

Q. Code to convert character array to string
	
	using System;

	public class CharArrayToString
	{
		public static string ConvertCharArrayToString(char[] charArray)
		{
			// Using the string constructor
			return new string(charArray);
		}

		public static void Main()
		{
			char[] charArray = { 'h', 'e', 'l', 'l', 'o' };
			string result = ConvertCharArrayToString(charArray);
			Console.WriteLine("Converted string: " + result); // Output: hello
		}
	}


---------------------------------------------------------------------------------------------------

Q. Work with lambda on Dictionary

	Filtering a Dictionary

		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class DictionaryLambdaExample
		{
			public static void Main()
			{
				Dictionary<string, int> productList = new Dictionary<string, int>
				{
					{ "Hard Disk", 1280 },
					{ "Monitor", 3000 },
					{ "SSD Disk", 3500 },
					{ "RAM", 2450 },
					{ "Processor", 7680 },
					{ "Bluetooth", 540 },
					{ "Keyboard", 1130 }
				};

				// Filter products with price greater than 2000
				var expensiveProducts = productList.Where(p => p.Value > 2000);

				Console.WriteLine("Expensive Products:");
				foreach (var product in expensiveProducts)
				{
					Console.WriteLine($"Product: {product.Key}, Price: {product.Value}");
				}
			}
		}

	 Transforming a Dictionary

		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class DictionaryLambdaExample
		{
			public static void Main()
			{
				Dictionary<string, int> productList = new Dictionary<string, int>
				{
					{ "Hard Disk", 1280 },
					{ "Monitor", 3000 },
					{ "SSD Disk", 3500 },
					{ "RAM", 2450 },
					{ "Processor", 7680 },
					{ "Bluetooth", 540 },
					{ "Keyboard", 1130 }
				};

				// Apply a 10% discount to all products
				var discountedProducts = productList.ToDictionary(
					p => p.Key,
					p => (int)(p.Value * 0.9)
				);

				Console.WriteLine("Discounted Products:");
				foreach (var product in discountedProducts)
				{
					Console.WriteLine($"Product: {product.Key}, Price: {product.Value}");
				}
			}
		}

	Finding a Specific Key-Value Pair

		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class DictionaryLambdaExample
		{
			public static void Main()
			{
				Dictionary<string, int> productList = new Dictionary<string, int>
				{
					{ "Hard Disk", 1280 },
					{ "Monitor", 3000 },
					{ "SSD Disk", 3500 },
					{ "RAM", 2450 },
					{ "Processor", 7680 },
					{ "Bluetooth", 540 },
					{ "Keyboard", 1130 }
				};

				// Find the product with the highest price
				var mostExpensiveProduct = productList.OrderByDescending(p => p.Value).FirstOrDefault();

				Console.WriteLine("Most Expensive Product:");
				Console.WriteLine($"Product: {mostExpensiveProduct.Key}, Price: {mostExpensiveProduct.Value}");
			}
		}

---------------------------------------------------------------------------------------------------

Q. You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps.
	In how many distinct ways can you climb to the top?

	Here’s a C# program to determine the number of distinct ways to climb to the top of a staircase with ( n ) steps, 
	where you can either climb 1 or 2 steps at a time:

	CODE ->

		using System;

		public class ClimbingStairs
		{
			public static int ClimbStairs(int n)
			{
				if (n <= 2)
				{
					return n;
				}

				int[] dp = new int[n + 1];
				dp[1] = 1;
				dp[2] = 2;

				for (int i = 3; i <= n; i++)
				{
					dp[i] = dp[i - 1] + dp[i - 2];
				}

				return dp[n];
			}

			public static void Main()
			{
				int n = 19;
				Console.WriteLine($"Number of ways to climb {n} steps: {ClimbStairs(n)}");

				n = 20;
				Console.WriteLine($"Number of ways to climb {n} steps: {ClimbStairs(n)}");
			}
		}

	NOTE -

	Explanation
		a. Base Cases: If ( n ) is 1 or 2, the number of ways to climb the stairs is ( n ) itself.
		b. Dynamic Programming Array: We use an array dp where dp[i] represents the number of ways to reach the ( i )-th step.
		c. Filling the Array: We fill the array using the relation dp[i] = dp[i - 1] + dp[i - 2], which means the number of 
		ways to reach the ( i )-th step is the sum of the ways to reach the ( (i-1) )-th step and the ( (i-2) )-th step.
		d. Result: The result is stored in dp[n].
	
	Time Complexity
		The time complexity of this solution is (O(n)), where (n) is the number of steps. This is because we iterate through the steps once to fill the dynamic programming array.

---------------------------------------------------------------------------------------------------

Q. Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s 
can be replaced to get t.

	using System;
	using System.Collections.Generic;

	public class IsomorphicStrings
	{
		public static bool AreIsomorphic(string s, string t)
		{
			if (s.Length != t.Length)
			{
				return false;
			}

			Dictionary<char, char> mapST = new Dictionary<char, char>();
			Dictionary<char, char> mapTS = new Dictionary<char, char>();

			for (int i = 0; i < s.Length; i++)
			{
				char charS = s[i];
				char charT = t[i];

				if (mapST.ContainsKey(charS))
				{
					if (mapST[charS] != charT)
					{
						return false;
					}
				}
				else
				{
					mapST[charS] = charT;
				}

				if (mapTS.ContainsKey(charT))
				{
					if (mapTS[charT] != charS)
					{
						return false;
					}
				}
				else
				{
					mapTS[charT] = charS;
				}
			}

			return true;
		}

		public static void Main()
		{
			string s1 = "egg";
			string t1 = "add";
			Console.WriteLine($"Are \"{s1}\" and \"{t1}\" isomorphic? {AreIsomorphic(s1, t1)}"); // Output: True

			string s2 = "foo";
			string t2 = "bar";
			Console.WriteLine($"Are \"{s2}\" and \"{t2}\" isomorphic? {AreIsomorphic(s2, t2)}"); // Output: False

			string s3 = "paper";
			string t3 = "title";
			Console.WriteLine($"Are \"{s3}\" and \"{t3}\" isomorphic? {AreIsomorphic(s3, t3)}"); // Output: True
		}
	}

---------------------------------------------------------------------------------------------------	

Q. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, 
	but a character may map to itself.
	Ex#1
	Input: s = "egg", t = "add"
	Output: true

	Ex#2
	Input: s = "foo", t = "bar"
	Output: false


	Here’s a C# program to determine if two strings ( s ) and ( t ) are isomorphic, meaning all occurrences of each character
	in ( s ) can be replaced with another character to get ( t ), while preserving the order of characters:

	CODE ->

		using System;
		using System.Collections.Generic;

		public class IsomorphicStrings
		{
			public static bool AreIsomorphic(string s, string t)
			{
				if (s.Length != t.Length)
				{
					return false;
				}

				Dictionary<char, char> mapST = new Dictionary<char, char>();
				Dictionary<char, char> mapTS = new Dictionary<char, char>();

				for (int i = 0; i < s.Length; i++)
				{
					char charS = s[i];
					char charT = t[i];

					if (mapST.ContainsKey(charS))
					{
						if (mapST[charS] != charT)
						{
							return false;
						}
					}
					else
					{
						mapST[charS] = charT;
					}

					if (mapTS.ContainsKey(charT))
					{
						if (mapTS[charT] != charS)
						{
							return false;
						}
					}
					else
					{
						mapTS[charT] = charS;
					}
				}

				return true;
			}

			public static void Main()
			{
				string s1 = "egg";
				string t1 = "add";
				Console.WriteLine($"Are \"{s1}\" and \"{t1}\" isomorphic? {AreIsomorphic(s1, t1)}"); // Output: True

				string s2 = "foo";
				string t2 = "bar";
				Console.WriteLine($"Are \"{s2}\" and \"{t2}\" isomorphic? {AreIsomorphic(s2, t2)}"); // Output: False

				string s3 = "paper";
				string t3 = "title";
				Console.WriteLine($"Are \"{s3}\" and \"{t3}\" isomorphic? {AreIsomorphic(s3, t3)}"); // Output: True
			}
		}


---------------------------------------------------------------------------------------------------

Q. Your task is to write a function that, given a list of words and a note, finds and returns the word
	in the list that is scrambled inside the note, if any exists. 
	If none exist, it returns the result "-" as a string. There will be at most one matching word. 
	The letters don't need to be in order or next to each other. The letters cannot be reused. Example:
	
	words = ["baby", "referee", "cat", "dada", "dog", "bird", "ax", "baz"]

	a. note1 = "ctay"
	find(words, note1) => "cat"   (the letters do not have to be in order)  

	b. note2 = "bcanihjsrrrferet"
	find(words, note2) => "cat"   (the letters do not have to be together)  
	
	c. note3 = "tbaykkjlga"
	find(words, note3) => "-"     (the letters cannot be reused)  
	
	d. note4 = "bbbblkkjbaby"
	find(words, note4) => "baby"
	
	e. note5 = "dad"
	find(words, note5) => "-"    
	
	f. note6 = "breadmaking"
	find(words, note6) => "bird"     
	
	g. note7 = "dadaa"
	find(words, note7) => "dada"     
	
	All Test Cases:
		find(words, note1) -> "cat"
		find(words, note2) -> "cat"
		find(words, note3) -> "-"
		find(words, note4) -> "baby"
		find(words, note5) -> "-"
		find(words, note6) -> "bird"
		find(words, note7) -> "dada"


	CODE ->

		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class ScrambledWordFinder
		{
			public static string Find(List<string> words, string note)
			{
				var noteCharCount = GetCharCount(note);

				foreach (var word in words)
				{
					var wordCharCount = GetCharCount(word);
					if (wordCharCount.All(kv => noteCharCount.ContainsKey(kv.Key) && noteCharCount[kv.Key] >= kv.Value))
					{
						return word;
					}
				}

				return "-";
			}

			private static Dictionary<char, int> GetCharCount(string str)
			{
				var charCount = new Dictionary<char, int>();
				foreach (var ch in str)
				{
					if (charCount.ContainsKey(ch))
					{
						charCount[ch]++;
					}
					else
					{
						charCount[ch] = 1;
					}
				}
				return charCount;
			}

			public static void Main()
			{
				var words = new List<string> { "baby", "referee", "cat", "dada", "dog", "bird", "ax", "baz" };

				Console.WriteLine(Find(words, "ctay"));           // Output: "cat"
				Console.WriteLine(Find(words, "bcanihjsrrrferet")); // Output: "cat"
				Console.WriteLine(Find(words, "tbaykkjlga"));     // Output: "-"
				Console.WriteLine(Find(words, "bbbblkkjbaby"));   // Output: "baby"
				Console.WriteLine(Find(words, "dad"));            // Output: "-"
				Console.WriteLine(Find(words, "breadmaking"));    // Output: "bird"
				Console.WriteLine(Find(words, "dadaa"));          // Output: "dada"
			}
		}

---------------------------------------------------------------------------------------------------

Q. Code to Transform xml data to json

	using System;
	using System.Xml;
	using Newtonsoft.Json;

	public class XmlToJsonConverter
	{
		public static string ConvertXmlToJson(string xml)
		{
			XmlDocument doc = new XmlDocument();
			doc.LoadXml(xml);

			string json = JsonConvert.SerializeXmlNode(doc);
			return json;
		}

		public static void Main()
		{
			string xml = @"<root>
								<person id='1'>
									<name>Alan</name>
									<url>http://www.google.com</url>
								</person>
								<person id='2'>
									<name>Louis</name>
									<url>http://www.yahoo.com</url>
								</person>
							</root>";

			string json = ConvertXmlToJson(xml);
			Console.WriteLine(json);
		}
	}

---------------------------------------------------------------------------------------------------

Q. Write code for below and optimize it (if time permits) and calculate the time complexity

	Problem :
	We have a two-dimensional board game involving snakes.  
		* The board has two types of squares on it: 
		* +'s represent impassable squares where snakes cannot go,
		* and 0's represent squares through which snakes can move.  
		* Snakes can only enter on the edges of the board, and each snake can move in only one direction. 
		* We'd like to find the places where a snake can pass through the entire board, moving in a straight line. 
		* Here is an example board:     
		* col-->          0  1  2  3  4  5  6
					   +----------------------
			row      0 |  +  +  +  0  +  0  0
			 |       1 |  0  0  +  0  0  0  0
			 |       2 |  0  0  0  0  +  0  0
			 v       3 |  +  +  +  0  0  +  0
					 4 |  0  0  0  0  0  0  0 
				 
	Write a function that takes a rectangular board with only +'s and 0's, 
	and returns two collections: * one containing all of the row numbers whose row is completely passable by snakes, 
	and  the other containing all of the column numbers where the column is completely passable by snakes. 
	Sample Inputs: 
	board1 = [['+', '+', '+', '0', '+', '0', '0'],
			  ['0', '0', '+', '0', '0', '0', '0'],
			  ['0', '0', '0', '0', '+', '0', '0'],
			  ['+', '+', '+', '0', '0', '+', '0'],
			  ['0', '0', '0', '0', '0', '0', '0']]

	cols:[3,5], rows:[4]

	CODE ->

		using System;
		using System.Collections.Generic;

		public class SnakeBoard
		{
			public static (List<int> passableRows, List<int> passableCols) FindPassableRowsAndCols(char[,] board)
			{
				int rows = board.GetLength(0);
				int cols = board.GetLength(1);
				var passableRows = new List<int>();
				var passableCols = new List<int>();

				// Check for passable rows
				for (int i = 0; i < rows; i++)
				{
					bool isPassable = true;
					for (int j = 0; j < cols; j++)
					{
						if (board[i, j] == '+')
						{
							isPassable = false;
							break;
						}
					}
					if (isPassable)
					{
						passableRows.Add(i);
					}
				}

				// Check for passable columns
				for (int j = 0; j < cols; j++)
				{
					bool isPassable = true;
					for (int i = 0; i < rows; i++)
					{
						if (board[i, j] == '+')
						{
							isPassable = false;
							break;
						}
					}
					if (isPassable)
					{
						passableCols.Add(j);
					}
				}

				return (passableRows, passableCols);
			}

			public static void Main()
			{
				char[,] board1 = {
					{'+', '+', '+', '0', '+', '0', '0'},
					{'0', '0', '+', '0', '0', '0', '0'},
					{'0', '0', '0', '0', '+', '0', '0'},
					{'+', '+', '+', '0', '0', '+', '0'},
					{'0', '0', '0', '0', '0', '0', '0'}
				};

				var result = FindPassableRowsAndCols(board1);
				Console.WriteLine("Passable Rows: " + string.Join(", ", result.passableRows)); // Output: 4
				Console.WriteLine("Passable Columns: " + string.Join(", ", result.passableCols)); // Output: 3, 5
			}
		}

	NOTE -
	Time Complexity - The time complexity of this solution is (O(n \times m)), where (n) is the number of rows and (m) 
	is the number of columns in the board. This is because we need to check each cell in the board exactly once to determine 
	if a row or column is passable.

	Optimization
	The current implementation is already quite efficient for the given problem. However, if the board is very large and
	performance becomes an issue, we could consider parallelizing the row and column checks using multi-threading or 
	parallel processing libraries in C#. This would help to speed up the computation by utilizing multiple CPU cores.

---------------------------------------------------------------------------------------------------

Q. 	You're creating a game with some amusing mini-games, and you've decided to make a simple variant of the game Mahjong. In this variant, players have a number of tiles, each marked 0-9. The tiles can be grouped into pairs or triples of the same tile. 
	For example, if a player has "33344466", the player's hand has a triple of 3s, a triple of 4s, and a pair of 6s. 
	Similarly, "55555777" has a triple of 5s, a pair of 5s, and a triple of 7s. 
	A "complete hand" is defined as a collection of tiles where all the tiles can be grouped into any number of triples 
	(zero or more) and exactly one pair, and each tile is used in exactly one triple or pair. Write a function that takes a string representation of a collection of tiles in no particular order, and returns true or false depending on whether or not the collection represents a complete hand.

	tiles_1 = "88844"           # True. Base case - a pair and a triple
	tiles_2 = "99"              # True. Just a pair is enough.
	tiles_3 = "55555"           # True. The triple and a pair can be of the same tile value
	tiles_4 = "22333333"        # True. A pair and two triples
	tiles_5 = "73797439949499477339977777997394947947477993"
	                            # True. 4 has two triples and a pair, other numbers have just triples
	tiles_6 = "111333555"       # False. There are three triples, 111 333 555 but no pair
	tiles_7 = "42"              # False. Two singles not forming a pair
	tiles_15 = "03799449"       # False. A pair of 4, triple of 9 and 0, 3, and 7 left over

	CODE ->

		using System;
		using System.Collections.Generic;

		public class Mahjong
		{
			public static bool IsCompleteHand(string tiles)
			{
				var tileCount = new Dictionary<char, int>();

				// Count occurrences of each tile
				foreach (var tile in tiles)
				{
					if (tileCount.ContainsKey(tile))
					{
						tileCount[tile]++;
					}
					else
					{
						tileCount[tile] = 1;
					}
				}

				bool hasPair = false;

				// Check for triples and pairs
				foreach (var count in tileCount.Values)
				{
					if (count % 3 == 1)
					{
						return false; // If there's a remainder of 1, it's not possible to form a complete hand
					}
					if (count % 3 == 2)
					{
						if (hasPair)
						{
							return false; // Only one pair is allowed
						}
						hasPair = true;
					}
				}

				return hasPair;
			}

			public static void Main()
			{
				string[] testCases = {
					"88844", "99", "55555", "22333333", 
					"73797439949499477339977777997394947947477993", 
					"111333555", "42", "03799449"
				};

				foreach (var tiles in testCases)
				{
					Console.WriteLine($"{tiles}: {IsCompleteHand(tiles)}");
				}
			}
		}

	NOTE -

	Explanation
		a. Counting Tiles: The function first counts the occurrences of each tile using a dictionary.
		b. Checking for Triples and Pairs: It then iterates through the counts to check if the tiles can form the required 
		triples and exactly one pair.
		c. Validation: If any tile count leaves a remainder of 1 when divided by 3, it’s impossible to form a complete hand.
		If more than one pair is found, it also returns false.
		
	Time Complexity - The time complexity of this solution is (O(n)), where (n) is the number of tiles. This is because we 
	iterate through the tiles to count them and then iterate through the counts to check for triples and pairs.


---------------------------------------------------------------------------------------------------

Q. You are working on a logic game made up of a series of puzzles. The first type of puzzle you settle on is "sub-Sudoku", a game
   where the player has to position the numbers 1..N on an NxN matrix.

	Your job is to write a function that, given an NxN matrix, returns true if  every row and column contains the numbers 1..N
	The UI for the game does not do any validation on the numbers the player enters, so the matrix can contain any signed integer.

	grid1 = [[2, 3, 1],
			 [1, 2, 3],
			 [3, 1, 2]]            -> True

	grid2 = [[1, 2, 3],
			 [3, 2, 1],
			 [3, 1, 2]]            -> False

	static void Main(String[] args) {
			var grid1 = new int[][]{
				new []{2, 3, 1},
				new []{1, 2, 3},
				new []{3, 1, 2},
			};
			var grid2 = new int[][]{
				new []{1, 2, 3},
				new []{3, 2, 1},
				new []{3, 1, 2},
			};

	CODE ->

		using System;
		using System.Linq;

		public class SubSudoku
		{
			public static bool IsValidSubSudoku(int[][] grid)
			{
				int n = grid.Length;

				// Check each row
				for (int i = 0; i < n; i++)
				{
					if (!IsValidSet(grid[i], n))
					{
						return false;
					}
				}

				// Check each column
				for (int j = 0; j < n; j++)
				{
					int[] column = new int[n];
					for (int i = 0; i < n; i++)
					{
						column[i] = grid[i][j];
					}
					if (!IsValidSet(column, n))
					{
						return false;
					}
				}

				return true;
			}

			private static bool IsValidSet(int[] set, int n)
			{
				bool[] seen = new bool[n + 1];
				foreach (int num in set)
				{
					if (num < 1 || num > n || seen[num])
					{
						return false;
					}
					seen[num] = true;
				}
				return true;
			}

			public static void Main(string[] args)
			{
				var grid1 = new int[][]{
					new []{2, 3, 1},
					new []{1, 2, 3},
					new []{3, 1, 2},
				};
				var grid2 = new int[][]{
					new []{1, 2, 3},
					new []{3, 2, 1},
					new []{3, 1, 2},
				};

				Console.WriteLine(IsValidSubSudoku(grid1)); // Output: True
				Console.WriteLine(IsValidSubSudoku(grid2)); // Output: False
			}
		}

	NOTE - 

	Explanation
		a. IsValidSubSudoku Function: This function checks each row and each column to ensure they contain the numbers 1 to N exactly once.
		b. IsValidSet Function: This helper function checks if a given set (row or column) contains all numbers from 1 to N without
		duplicates.
	
	Time Complexity
		The time complexity of this solution is (O(N^2)), where (N) is the size of the grid. This is because we need to check each 
		element in the grid exactly once.


---------------------------------------------------------------------------------------------------

Q. We have a bin of robot parts in a factory. Each part goes to a robot with a specific, unique name. Each part will be described by 
   a string, with the name of the robot and the part name separated by an underscore, like "Rocket_arm".	

   All robots are made of the same types of parts, and we have a string of all of the parts required to form a complete robot. Given a list of available parts, return the collection of robot names for which we can build at least one complete robot.
	
   Sample Input:

	all_parts = [
		"Rocket_claw",
		"Rocket_sensors", 
		"Dustie_case", 
		"Rust_sensors",
		"Bolt_sensors",
		"Rocket_case",
		"Rust_case",
		"Bolt_speaker",
		"Rocket_wheels",
		"Rocket_speaker",
		"Dustie_case",
		"Dustie_arms",
		"Rust_claw",
		"Dustie_case",
		"Dustie_speaker",
		"Bolt_case",
		"Bolt_wheels",
		"Rust_legs",
		"Bolt_sensors" ]

		required_parts_1 = "sensors,case,speaker,wheels"
		required_parts_2 = "sensors,case,speaker,wheels,claw"

		Expected Output (output can be in any order):

		get_robots(all_parts, required_parts_1) => ["Bolt", "Rocket"]
		get_robots(all_parts, required_parts_2) => ["Rocket"]

		 

	N: Number of elements in `all_parts`
	P: Number of elements in `required_parts`

	CODE ->
	
		using System;
		using System.Collections.Generic;
		using System.Linq;

		public class RobotFactory
		{
			public static List<string> GetRobots(List<string> allParts, string requiredParts)
			{
				var requiredPartsSet = new HashSet<string>(requiredParts.Split(','));
				var robotParts = new Dictionary<string, HashSet<string>>();

				// Organize parts by robot name
				foreach (var part in allParts)
				{
					var splitPart = part.Split('_');
					var robotName = splitPart[0];
					var partName = splitPart[1];

					if (!robotParts.ContainsKey(robotName))
					{
						robotParts[robotName] = new HashSet<string>();
					}
					robotParts[robotName].Add(partName);
				}

				// Find robots that can be fully assembled
				var completeRobots = new List<string>();
				foreach (var robot in robotParts)
				{
					if (requiredPartsSet.All(part => robot.Value.Contains(part)))
					{
						completeRobots.Add(robot.Key);
					}
				}

				return completeRobots;
			}

			public static void Main()
			{
				var allParts = new List<string>
				{
					"Rocket_claw", "Rocket_sensors", "Dustie_case", "Rust_sensors",
					"Bolt_sensors", "Rocket_case", "Rust_case", "Bolt_speaker",
					"Rocket_wheels", "Rocket_speaker", "Dustie_case", "Dustie_arms",
					"Rust_claw", "Dustie_case", "Dustie_speaker", "Bolt_case",
					"Bolt_wheels", "Rust_legs", "Bolt_sensors"
				};

				string requiredParts1 = "sensors,case,speaker,wheels";
				string requiredParts2 = "sensors,case,speaker,wheels,claw";

				var robots1 = GetRobots(allParts, requiredParts1);
				var robots2 = GetRobots(allParts, requiredParts2);

				Console.WriteLine("Robots for requiredParts1: " + string.Join(", ", robots1)); // Output: Bolt, Rocket
				Console.WriteLine("Robots for requiredParts2: " + string.Join(", ", robots2)); // Output: Rocket
			}
		}

	NOTE -

	Explanation -
		a. Organize Parts by Robot Name: The function first organizes the parts by robot name using a dictionary where the key is the 
		robot name and the value is a set of parts for that robot.
		b. Check for Complete Robots: It then checks if each robot has all the required parts by comparing the parts set of each robot
		with the required parts set.
		c. Return Complete Robots: Finally, it returns a list of robot names that can be fully assembled.
		
	Time Complexity
		The time complexity of this solution is (O(N \times P)), where (N) is the number of elements in all_parts and (P) is the
		number of elements in required_parts. This is because we need to process each part and check each required part for each robot.



---------------------------------------------------------------------------------------------------

Q. Write a program to check if two strings are anagrams
   Ex - hello and elloh are anagrams
		
		using System;
		using System.Linq;

		public class AnagramChecker
		{
			public static bool AreAnagrams(string str1, string str2)
			{
				// If lengths are different, they cannot be anagrams
				if (str1.Length != str2.Length)
				{
					return false;
				}

				// Convert strings to character arrays and sort them
				char[] charArray1 = str1.ToCharArray();
				char[] charArray2 = str2.ToCharArray();
				Array.Sort(charArray1);
				Array.Sort(charArray2);

				// Compare sorted arrays
				return charArray1.SequenceEqual(charArray2);
			}

			public static void Main()
			{
				string str1 = "hello";
				string str2 = "elloh";

				if (AreAnagrams(str1, str2))
				{
					Console.WriteLine($"{str1} and {str2} are anagrams.");
				}
				else
				{
					Console.WriteLine($"{str1} and {str2} are not anagrams.");
				}
			}
		}


	



********************************************************

1) Dictionary vs List 
2) .Net Framework vs .Net Core
7) Strategy pattern
8) How to do Unit testing 
9) Azure fn scenario
10) Function vs App Services
11) SQL vs Cosmo Db
12) CICD process and tasks
13) Resolve SQL Performance issue




********************************************************

1) Problems faced while transforming xml data to json
2) Disadvantages of xml and advantage of json 
3) Type of service injections in .Net Core and difference 
4) Unit Testing , Why Moq framework is used , what is mocked generally in unit testing
5) Abstract  vs Interface
6) During build if the pipeline run fails due to unit test case , how would you triage it
7) Desing and implement custom Authorization for Web API 
8) What is your definition for a work item complete
9) Since C# version 9 , any new functionalities you have adopted
10) How do you handle sceurity vulnerabilities of you packages
11) Two function apps deployed on Azure , The apps are not always on and running on seperate schedules, However the two apps need to communicate with each other . How would you handle the communication here .

********************************************************

1. Difference between Dotnet 6.0 to previous version?
2. What are the configuration you see in Startup.cs file?
3. CRUD operations in Rest?
4. Why do we configure Signleton in Startup.cs?
5. Some of the Http responses you handled?
6. Do you have experience with Appinsights?
7. Whats the difference between SQL and No-SQL?
8. SOLID principles
9. Unit testing framework?
10. Repository pattern?
11. What is the reason of considering Dependency injection?


Diff Dictionary and List
ASP.Net and ASP.Net core
Unit testing framework


		
	

********************************************************

Which version of Dotnet?
What are the new features in Dotnet core 6.0?
Different services used in Azure?
What is the function app usage, how did you use it?
What type of triggers you used?
How the connection to KeyVault established to function app?
How does your app knows the latest value of KeyVault?
Is there a way to trigger to restart function app when KV gets changed?
Handling the exceptions with Event hub?
Who used to take care of Infra provisioing, is it you or other DevOps?
Any Azure monitoring experience?
What type of testing you used to do?
What is your process from development to deployment?
Have you used any tool for Static code analysis?





********************************************************

1) Explian your previous project?
2) What is Service Bus ?
3) Difference between service bus topic and queue ?
4) What will happen if a  service bus message fails to get processed ? 
5) Service bus message retry mechanism 
6) Explain the Azure Function app that you have created ?
7) Do you have experience on creating the azure resource using terraform?
8) What is APIM and its use ?
9) Where to configure the environment based settings in Azure Function ?
10) Why use Key Vault ?
11) If the secret value is change in the Keyvault ,How the new value will be picked up without a application restart?
12) Branching strategy
13) Mention few PR review checks?
14) What are Next steps after PR is approved?
15) How do you perform testing on code changes ?
16) Diff b/w unit testing & integration testing ?
17) What Unit test framework you used
18) Have you used Moq 
19) Types of dependency scope in .NetCore 

********************************************************
