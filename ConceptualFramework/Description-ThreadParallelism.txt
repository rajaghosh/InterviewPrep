This project has Threading and Async Related .net C# examples

**********************************************************************************************************

	Concepts (base) -
	1. There is a thread which can be time sliced (context-switching).
	2. Each cpu core can have more than on threads.

**********************************************************************************************************

Concurrency Vs Parallelism -

	Concurrancy - Executing multiple task on the same core. It is a feel of parallelism, here context switching happens to run
	multiple process. 
	The goal here is to have non-blocking application. Here resource sharing can happen.

	Parallelism - Executing multiple task on multiple cores. 
	The goal here is to achieve performance. Here resource sharing will not happen.

	Note - If the applications interact with each other its better they should not be made parallel as this will block the application too much.

	For parallelism it is not possible to determine the sequence of the output. As it will be totally dependent on the context switching of the
	processor.


**********************************************************************************************************

	TASKS -

	Typically Task will be used for "concurrency" i.e users will feel their program is running fast. Here the main thread (default)
	will be time sliced such that our execution will be time sliced between the multiple task on the same thread.

	By default we would use a code like

	public async Task Funct1(){
		await Task.Run(() => {
			//Do some work
		});	
	}

	Here for each task of a code flow from a method, they will be time sliced and run on a thread.

	NOTE - Special case - For a application if we have a code 
	 
	 Console.WriteLine("1");
	 Console.WriteLine("2");
	 await Task.Delay(20000); //20 sec delay
	 Console.WriteLine("3");
	 Console.WriteLine("4");

	 Here when the flow starts it will have thread A but when await completes if thread A is not alive 
	 then another thread say thread B will be used to execute. This scenario is for multi-threaded environment.

	------------------------------------------------------------------------------------

	If we use TPL where syntax is 

	Task.Factory.StartNew(Func1); 
	Task.Factory.StartNew(Func2); 

	Here for each new Task creates (with TPL) they will run on seperate cores parallely.

	Use case - 
	The actual advantage of TPL is to run the operations intelligently on available processor slots (i.e threads of the processors).
	
	Suppose we have a method where we need to run a iteration of 10000 runs
	
	public void Function(){
		for(int i=0;i<10000;i++)
		{
			Console.WriteLine(i);
		}
	}
	
	Parallel.For(0,10000, x => Function());	//This is using of TPL


**********************************************************************************************************

 Async / Await - They are markers which mark code positions from where control should resume after a task (thread) completes.
 If we do not use the Async/await then Task/Thread will run parallely/individually of the original flow.


 Advantage - 
 1. We can use async to control the position of the call/output of the task flow.
 2. On the original flow when async is used, if there is a blocking call async calls if original thread is lost it can get you
 a new thread to work on. [Typically async are used with task - Please check the above topic on task].
 3. It helps to have concurrency.


 *For a async method if we return before async calls it would be synchronous method.


**********************************************************************************************************

 Threads -  They can be created as 
 Thread tName = new Thread(func1);
 tName.Start();

 So to check the current thread

 void func1(){
	Console.WriteLine(Thread.CurrentThread.ManagedThreadId);
 }

 Threads can be foreground thread as well as background thread.

**********************************************************************************************************





