This project has Design Pattern related .net core C# examples.

Design Patterns - Reusable solutions to the problems that we encouter every day of programming.

*************************************************************************************************************
*************************************************************************************************************
Singleton Design Pattern - (Creational Design Pattern) - This pattern is used when we need to ensure that only one object of a particular
class need to be created. All further References to the objects are referred to the same underlying instance created. 

Advantages of Singleton - 
a. Singleton controls concurrent access to the resource.
b. It ensures that there is only one object available across the application in a controlled state.

Implementation Guidelines - 
1. Ensure that only one instance of the class exists.
2. Provide global access to that instance by:
	a. Declaring all constructors of the class to be private.
	b. Providing static method that returns a reference to the instance
	c. The instance is stored as a private static variable.

It gets very important when we want to instanciate a single logic scope for all the object instanciation.
Ex - Suppost there are several users. For each users we can have same resource allocation. Say we need some configuration data fetch from DB
for mail sending. Now this config data will be same for every users. So only one instance initiation will be enough.

So real world usage of Singleton is:
1. Logging
2. Managing a connection or a pool of connections to DB.
3. Printer Spooling
4. File
5. Configuration
6. Cache
7. Session Based Shopping Cart

One important concept is 

Static vs Singleton Class
1. Static is a Keyword and Singleton is a design pattern.
2. Static classes can only contain static members.
3. Singleton is an object creational pattern with one instance of the class. It can implement interfaces, inherit from other class and it aligns
with OOP concepts.


*************************************************************************************************************
*************************************************************************************************************
Aggregate Root Design Pattern - It is an aggregate relationship that references all other methods or classes via a single class.
So this single class would be a single entry point or the aggregate root.
It will be implemented where we want to treat 1:N as a single logical unit.
*************************************************************************************************************
*************************************************************************************************************
Iterator Design Pattern - It helps to loop through data in Aggregate Root condition. 
 * Iterator is a behavioral design pattern 
 * that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).
*************************************************************************************************************
*************************************************************************************************************
Adapter Design Pattern - Also called Wrapper Class Pattern.
 * This design pattern allows 2 dissimilar classes to interact using 2 different "Interface" having similar communication endpoints.
 * This comes under "Structural Design Pattern" as this combines the capability of 2 independent interfaces.
*************************************************************************************************************
*************************************************************************************************************
Factory Design Pattern - Creational Design Pattern - Design an interface for creating objects. But let the sub-class determine which classes to 
instanciate.
Here we will create object without providing creational logic to the client.
*************************************************************************************************************
*************************************************************************************************************
Abstract Factory Design Pattern - It is a creational design pattern. Here we can have several factory patterns. Each Factory Implementation 
Interface is listed in a Super Interface. 
So if we have N factory interfaces all of the interface link will be declared inside the Abstract Factory Super Interface. No during execution 
we will have a choice to choose the required factory interface and its required implementation.











